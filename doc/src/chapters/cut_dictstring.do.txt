

!split
===== Web pages are nothing but text files =====

!bblock
The text is a mix of HTML commands and the text displayed in
the browser:

!bc htmlpro
<html>
<body bgcolor="orange">
<h1>A Very Simple Web Page</h1> <!-- headline -->
Ordinary text is written as ordinary text, but when we
need headlines, lists,
<ul>
<li><em>emphasized words</em>, or
<li> <b>boldfaced words</b>,
</ul>
we need to embed the text inside HTML tags. We can also
insert GIF or PNG images, taken from other Internet sites,
if desired.
<hr> <!-- horizontal line -->
<img src="http://www.simula.no/simula_logo.gif">
</body>
</html>
!ec
!eblock

!split
===== The web page generated by HTML code from the previous slide =====

FIGURE: [fig-dictstring/simple_webpage, width=600 frac=1.0]

!split
===== Programs can extract data from web pages =====

!bblock
 * A program can download a web page, as an HTML file, and extract data by interpreting the text in the file (using string operations).
 * Example: "climate data from the UK": "http://www.metoffice.gov.uk/climate/uk/stationdata/"

Download `oxforddata.txt` to a local file `Oxford.txt`:

!bc pycod
import urllib
baseurl = 'http://www.metoffice.gov.uk/climate/uk/stationdata'
filename = 'oxforddata.txt'
url = baseurl + '/' + filename
urllib.urlretrieve(url, filename='Oxford.txt')
!ec
!eblock

!split
===== The structure of the Oxfort.txt weather data file =====

!bc pycod
Oxford
Location: 4509E 2072N, 63 metres amsl
Estimated data is marked with a * after the value.
Missing data (more than 2 days missing in month) is marked by  ---.
Sunshine data taken from an automatic ...
   yyyy  mm   tmax    tmin      af    rain     sun
              degC    degC    days      mm   hours
   1853   1    8.4     2.7       4    62.8     ---
   1853   2    3.2    -1.8      19    29.3     ---
   1853   3    7.7    -0.6      20    25.9     ---
   1853   4   12.6     4.5       0    60.1     ---
   1853   5   16.8     6.1       0    59.5     ---

...

   2010   5   17.6     7.3       0    28.6   207.4
   2010   6   23.0    11.1       0    34.5   230.5
   2010   7   23.3*   14.1*      0*   24.4*  184.4*  Provisional
   2010  10   14.6     7.4       2    43.5   128.8   Provisional
!ec

!split
===== Reading the climate data =====

!bblock Algorithm:
  o Read the place and location in the file header
  o Skip the next 5 (for us uninteresting) lines
  o Read the column data and store in dictionary
  o Test for numbers with special annotation, "provisional" column, etc.
!eblock

!bblock Program, part 1:
!bc pycod
local_file = 'Oxford.txt'
infile = open(local_file, 'r')
data = {}
data['place'] = infile.readline().strip()
data['location'] = infile.readline().strip()
# Skip the next 5 lines
for i in range(5):
    infile.readline()
!ec
!eblock

!split
===== Reading the climate data - program, part 2 =====

!bblock Program, part 2:
!bc pycod
data['data'] ={}
for line in infile:
    columns = line.split()

    year = int(columns[0])
    month = int(columns[1])

    if columns[-1] == 'Provisional':
        del columns[-1]
    for i in range(2, len(columns)):
        if columns[i] == '---':
            columns[i] = None
        elif columns[i][-1] == '*' or columns[i][-1] == '#':
            # Strip off trailing character
            columns[i] = float(columns[i][:-1])
        else:
            columns[i] = float(columns[i])
!ec
!eblock

!split
===== Reading the climate data - program, part 3 =====

!bblock Program, part 3
!bc pycod
for line in infile:
    ...
    tmax, tmin, air_frost, rain, sun = columns[2:]

    if not year in data['data']:
        data['data'][year] = {}
    data['data'][year][month] = {'tmax': tmax,
                                 'tmin': tmin,
                                 'air frost': air_frost,
                                 'sun': sun}
!ec
!eblock